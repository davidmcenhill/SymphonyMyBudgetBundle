<?php

namespace CbaImporterTest;
require_once("C:\Users\Administrator\Documents\NetBeansProjects\MyBudget\src\Btg\MyBudgetBundle\Controller\CbaImporter.php");

use CbaImporter;
use Importer;
use Importer\RESULT_KEY1;   // Widely used hence using class name instead of easier to understand qualified.

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-25 at 16:07:40.
 */
class CbaImporterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var CbaImporter
     */
    protected $object;
    protected $txnSrc;
    protected $txnSink;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $lines = array();
        $this->txnSrc = new Importer\TxnSourceArray($lines);
        $this->txnSink = new Importer\TxnSinkArray();
        $this->object = new CbaImporter\CbaImporter($this->txnSrc, $this->txnSink);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * Tests that FALSE is returned if the start date is not in the string.
     */
    public function testLookForDateNotFound()
    {
        $this->setUp();
        $line = 'Statement            4 (Page 1 of 16)';
        $this->assertFalse($this->object->lookForDate($line, 'Statement begins'));
        $this->tearDown();
    }

    /**
     * Tests that date is returned if the start date is valid.
     */
    public function testLookForDate()
    {
        $this->setUp();
        $line = 'Statement begins     4 September 2011';
        $this->assertEquals('4 September 2011', $this->object->lookForDate($line, 'Statement begins'));
        $this->tearDown();
    }

    /**
     * Test the setting of the start date given a valid line containing it.
     */
    public function testSetStartDate()
    {
        $this->setUp();
        $line = 'Statement begins     4 September 2011';
        $this->object->setStartDate($line);
        //$date = new DateTime;   // Type hint.
        $date = $this->object->startDate;
        $this->assertEquals('04/09/2011', $date->format('d/m/Y'));
        $this->tearDown();
    }

    /**
     * Test the setting of the end date given a valid line containing it.
     */
    public function testSetEndDate()
    {
        $this->setUp();
        $line = '                                                                     ' .
           'Statement ends       3 December 2011';
        $this->object->setEndDate($line);
        //$date = new DateTime;   // Type hint.
        $date = $this->object->endDate;
        $this->assertEquals('03/12/2011', $date->format('d/m/Y'));
        $this->tearDown();
    }

    /**
     * Test that a line not containing a transction returns false.
     */
    public function testLookForTransactionNoTransaction()
    {
        $this->setUp();
        $line = '       BALANCE BROUGHT FORWARD $3,683.40                                               $3,683.40 CR';
        $this->assertFalse($this->object->lookForTransaction($line));
        $this->tearDown();
    }

    /**
     * Test that a valid start of a transction can be found.
     */

    /**
     * Test that a line not containing a transction returns false.
     */
    public function testLookForTransactionInvalidMonth()
    {
        $this->setUp();
        $line = '07 Ola Wdl ATM SUNCORP BANK COLLINS ST BRANCH                  50.00 -   ';
        $this->assertFalse($this->object->lookForTransaction($line));
        $this->tearDown();
    }

    /**
     * Test lookForTransaction case of the transction is a single line valid transaction.
     */
    public function testLookForTransaction()
    {
        $this->setUp();
        $line = '07 Sep Wdl ATM SUNCORP BANK COLLINS ST BRANCH                  50.00 -   ';
        $this->assertTrue($this->object->lookForTransaction($line));
        $this->tearDown();
    }
    
    /**
     * Test lookForTransaction case of the transaction is not valid because the date has the year too.
     */
    public function testLookForTransactionLongDate()
    {
        $this->setUp();
        $line = '04 Sep 2011 OPENING BALANCE   ';
        $this->assertFalse($this->object->lookForTransaction($line));
        $this->tearDown();
    }

    /**
     * Test that processTransaction returns true for a valid transaction.
     */
    public function testProcessTransaction()
    {
        $this->setUp();
        $more = true;
        $line = '07 Sep Wdl ATM SUNCORP BANK COLLINS ST BRANCH                  50.00 -   ';
        $results = $this->object->processTransaction($line, $more);
        \var_dump($results);
        $this->assertFalse($more);
        $this->assertEquals('07 Sep', $results[Importer\RESULT_KEY1::DATE]);
        $this->assertEquals('Wdl ATM SUNCORP BANK COLLINS ST BRANCH', $results[RESULT_KEY1::DESCRIPTION]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $results) || ($results[RESULT_KEY1::CREDIT] == 0)));
        $this->assertEquals('50.00', $results[RESULT_KEY1::DEBIT]);
        $this->tearDown();
    }

   /**
     * Test that processTransaction returns true for a valid transaction.
     * case where a debit is identified by a 2 instead of a -
     */
    public function testProcessTransactionDebit2()
    {
        $this->setUp();
        $more = false;
        $line = '07 Sep HAIRWORLD-SOUTHLAND CHELTENHAM VIC                                 40.00 2';
        $results = $this->object->processTransaction($line, $more);
        //\var_dump($results);
        $this->assertFalse($more);
        $this->assertEquals('07 Sep', $results[RESULT_KEY1::DATE]);
        $this->assertEquals('HAIRWORLD-SOUTHLAND CHELTENHAM VIC', $results[RESULT_KEY1::DESCRIPTION]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $results) || ($results[RESULT_KEY1::CREDIT] == 0)));
        $this->assertEquals('40.00', $results[RESULT_KEY1::DEBIT]);
        $this->tearDown();
    }
   /**
     * Test that processTransaction returns true for a valid transaction.
     * case where a debit has a comma in it
     */
    public function testProcessTransactionDebit3()
    {
        $this->setUp();
        $more = false;
        $line = '07 Sep HAIRWORLD-SOUTHLAND CHELTENHAM VIC                                 40,000.00 2';
        $results = $this->object->processTransaction($line, $more);
        //\var_dump($results);
        $this->assertFalse($more);
        $this->assertEquals('07 Sep', $results[RESULT_KEY1::DATE]);
        $this->assertEquals('HAIRWORLD-SOUTHLAND CHELTENHAM VIC', $results[RESULT_KEY1::DESCRIPTION]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $results) || ($results[RESULT_KEY1::CREDIT] == 0)));
        $this->assertEquals('40000.00', $results[RESULT_KEY1::DEBIT]);
        $this->tearDown();
    }
    /**
     * Test extraction of a multi-line debit amount
     */
    public function testProcessTransactionNextLineDebit()
    {
        $this->setUp();
        $line = '       Value Date: 01/09/2011                                             8,000.00 -';
        $result = array();
        $this->assertFalse($this->object->processTransactionNextLine($line, $result));
        $this->assertEquals('8000.00', $result[RESULT_KEY1::DEBIT]);
        $this->tearDown();
    }

    /**
     * Test extraction of a multi-line credit amount
     */
    public function testProcessTransactionNextLineCredit()
    {
        $this->setUp();
        $line = '                                                                                   2,945.87             $3,683.40 CR';
        $result = array();
        $this->assertFalse($this->object->processTransactionNextLine($line, $result));
        $this->assertEquals('2945.87', $result[RESULT_KEY1::CREDIT]);
        $this->tearDown();
    }

    public function testxformFileEmpty()
    {
        $this->setUp();
        $lines = array();
        $this->txnSrc->setLines($lines);
        $this->assertEquals(0, $this->object->processTxns());
        $this->tearDown();
    }
        
    /**
     * Test one transaction is extracted for the given lines.
     */
    public function testXformFile()
    {
        $this->setUp();
        $lines = array(
            'Statement            4 (Page 1 of 16)',
            '     Statement begins     4 September 2011',
            '     Statement ends       3 December 2011',
            '  MR D AND MS O R MCENHILL                       ',
            '       Closing balance      $1,048.98 CR',
            '04 Sep 2011 OPENING BALANCE                                                                              $838.42 CR',
            '04 Sep HAIRWORLD-SOUTHLAND CHELTENHAM VIC                                 40.00 2'
           );
           
        $this->txnSrc->setLines($lines);
        $this->assertEquals(
           1
           , $this->object->processTxns('')
        );
        $this->tearDown();
    }
    
    /**
     * Test one transaction is extracted for the given lines containing one multi-line transaction.
     */
    public function testXformFileMultiLine()
    {
        $this->setUp();
        $lines = array(
            'Statement            4 (Page 1 of 16)',
            '     Statement begins     4 September 2011',
            '     Statement ends       3 December 2011',
            '  MR D AND MS O R MCENHILL                       ',
            '       Closing balance      $1,048.98 CR',
            '04 Sep TARGET SOUTHLAND VIC AU',
            '                                           ',
            '       Cash Out $20.00 Purchase $58.00                                    78.00 -'
           );
           
        $this->txnSrc->setLines($lines);
        $this->assertEquals(
           1
           , $this->object->processTxns('')
        );
        $this->tearDown();
    }
    
    /**
     * Test transaction is extracted correctly for the given lines.
     */
    public function testXformFileTransactionFormat()
    {
        $this->setUp();
        $lines = array(
            'Statement            4 (Page 1 of 16)',
            '     Statement begins     4 September 2011',
            '     Statement ends       3 December 2011',
            '  MR D AND MS O R MCENHILL                       ',
            '       Closing balance      $1,048.98 CR',
            '04 Sep 2011 OPENING BALANCE                                                                              $838.42 CR',
            '04 Sep HAIRWORLD-SOUTHLAND CHELTENHAM VIC                                 40.00 2'
           );
           
        $this->txnSrc->setLines($lines);
        $this->object->processTxns();
  
        $output = $this->txnSink->getLastTxn();
        $this->assertEquals('04/09/2011', $output[RESULT_KEY1::DATE]->format('d/m/Y'));
        $this->assertEquals('HAIRWORLD-SOUTHLAND CHELTENHAM VIC', $output[RESULT_KEY1::DESCRIPTION]);
        $this->assertEquals('40.00', $output[RESULT_KEY1::DEBIT]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $output) || ($output[RESULT_KEY1::CREDIT] == 0)));
        $this->tearDown();
    }
    
    /**
     * Test transaction is extracted correctly for the given lines.
     */
    public function testXformFileTransactionFormatMultiLine()
    {
        $this->setUp();
        $lines = array(
            'Statement            4 (Page 1 of 16)',
            '     Statement begins     4 September 2011',
            '     Statement ends       3 December 2011',
            '  MR D AND MS O R MCENHILL                       ',
            '       Closing balance      $1,048.98 CR',
            '04 Sep HAIRWORLD-SOUTHLAND CHELTENHAM VIC                                 40.00 2',
            '04 Sep TARGET SOUTHLAND VIC AU',
            '                                           ',
            '       Cash Out $20.00 Purchase $58.00                                    78.00 -'
           );
           
        $this->txnSrc->setLines($lines);
        $this->object->processTxns();
        $output = $this->txnSink->getLastTxn();
        $this->assertEquals('04/09/2011', $output[RESULT_KEY1::DATE]->format('d/m/Y'));
        $this->assertEquals('TARGET SOUTHLAND VIC AU', $output[RESULT_KEY1::DESCRIPTION]);
        $this->assertEquals('78.00', $output[RESULT_KEY1::DEBIT]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $output) || ($output[RESULT_KEY1::CREDIT] == 0)));
        $this->tearDown();
    }
    
    /**
     * Test the setTxn of the transaction sink (ideally test is not part of CbaImporter
     * but since this is the first implementation of that abstract class I put it here.
     */
    public function testTxnSinkSetTxn()
    {
        $this->setUp();
        $result = array();
        $result[RESULT_KEY1::DATE] = '04 Sep';
        $result[RESULT_KEY1::DESCRIPTION] = 'HAIRWORLD-SOUTHLAND CHELTENHAM VIC';
        $result[RESULT_KEY1::DEBIT] = '40.00';
        $this->txnSink->setTxn($result);
        $output = $this->txnSink->getLastTxn();
        $this->assertEquals($result[RESULT_KEY1::DATE], $output[RESULT_KEY1::DATE]);
        $this->assertEquals($result[RESULT_KEY1::DESCRIPTION], $output[RESULT_KEY1::DESCRIPTION]);
        $this->assertEquals($result[RESULT_KEY1::DEBIT], $output[RESULT_KEY1::DEBIT]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $output) || ($output[RESULT_KEY1::CREDIT] == 0)));
        $this->tearDown();
    }
    
    /**
     * Test that the first tranasction is extracted from file C:\tmp\txns.txt
     */
    public function testReadTxnsFromFileFirst()
    {
        
        $this->setUp();
        $filename = 'C:\\tmp\\txns.txt';
        $txnSrc = new Importer\TxnSourceFile($filename);
        $txnSink = new Importer\TxnSinkArray();
        $cbaImp = new CbaImporter\CbaImporter($txnSrc, $txnSink);
        $cbaImp->processTxns();
        $output = $txnSink->getNthTxn(0);
        $this->assertEquals('05/09/2011', $output[RESULT_KEY1::DATE]->format('d/m/Y'));
        $this->assertEquals('HAIRWORLD-SOUTHLAND CHELTENHAM VIC', $output[RESULT_KEY1::DESCRIPTION]);
        $this->assertEquals('40.00', $output[RESULT_KEY1::DEBIT]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $output) || ($output[RESULT_KEY1::CREDIT] == 0)));
        $this->tearDown();
        
    }
    
    /**
     * Test that the first tranasction is extracted from file C:\tmp\txns.txt
     */
    public function testReadTxnsFromFileLast()
    {
        
        $this->setUp();
        $filename = 'C:\\tmp\\txns.txt';
        $txnSrc = new Importer\TxnSourceFile($filename);
        $txnSink = new Importer\TxnSinkArray();
        $cbaImp = new CbaImporter\CbaImporter($txnSrc, $txnSink);
        $cbaImp->processTxns();
        $output = $txnSink->getLastTxn();
        $this->assertEquals('04/09/2011', $output[RESULT_KEY1::DATE]->format('d/m/Y'));
        $this->assertEquals('TARGET SOUTHLAND VIC AU', $output[RESULT_KEY1::DESCRIPTION]);
        $this->assertEquals('78.00', $output[RESULT_KEY1::DEBIT]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $output) || ($output[RESULT_KEY1::CREDIT] == 0)));
        $this->tearDown();
    }
    /**
     * Test that the importing of file tranasction is successful from live file
     * C:\tmp\CBA Savings Statement03122011.txt
     */
    public function testReadTxnsFromFileFullFirst()
    {        
        $this->setUp();
        $filename = 'C:\\tmp\\CBA Savings Statement03122011.txt';
        $txnSrc = new Importer\TxnSourceFile($filename);
        $txnSink = new Importer\TxnSinkArray();
        $cbaImp = new CbaImporter\CbaImporter($txnSrc, $txnSink);
        $cbaImp->processTxns();
        $output = $txnSink->getNthTxn(0);
        $this->assertEquals('04/06/2011', $output[RESULT_KEY1::DATE]->format('d/m/Y'));
        $this->assertEquals('Transfer to xx8683 NetBank', $output[RESULT_KEY1::DESCRIPTION]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::CREDIT, $output) || ($output[RESULT_KEY1::CREDIT] == 0)));
        $this->assertEquals('60.00', $output[RESULT_KEY1::DEBIT]);
        $this->tearDown();
    }
    /**
     * Test that the importing of file tranasction is successful from live file
     * C:\tmp\CBA Savings Statement03122011.txt
     */
    public function testReadTxnsFromFileFullLast()
    {        
        $this->setUp();
        $filename = 'C:\\tmp\\CBA Savings Statement03122011.txt';
        $txnSrc = new Importer\TxnSourceFile($filename);
        $txnSink = new Importer\TxnSinkArray();
        $cbaImp = new CbaImporter\CbaImporter($txnSrc, $txnSink);
        $cbaImp->processTxns();
        $output = $txnSink->getLastTxn();
        $this->assertEquals('01/12/2011', $output[RESULT_KEY1::DATE]->format('d/m/Y'));
        $this->assertEquals('Credit Interest                                                                           3', $output[RESULT_KEY1::DESCRIPTION]);
        $this->assertTrue((!\array_key_exists(RESULT_KEY1::DEBIT, $output) || ($output[RESULT_KEY1::DEBIT] == 0)));
        $this->assertEquals('24.23', $output[RESULT_KEY1::CREDIT]);
        $this->tearDown();
    }
    
}
